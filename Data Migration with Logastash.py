import requests
import json
import time
import datetime

url_1 = "http://dap-data-sync-orchestrator:80/pipelines/new" ## the dap-data-sync orchestrator url PG to RS

webhook_url= 'https://hooks.slack.com/services/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'

form_data = [{
    "name": "pipeline-pg-rs",
    "user": "Kartikey",
    "description": "pg to rs",
    "tags": ["pg","sync","rs"],
    "parameters": {
        "source_type": "postgres",
        "destination_type": "redshift",
        "source_schema": "l2",
        "source_table": "pd_activity",
        "destination_schema": "l1",
        "destination_table": "pd_activity_test2",
        "order_column": "empi",
        "run_at_once": "true",
        "RS_WORKER": "1",
        "source_config": {
            "username": "batman",
            "host": "arkansashealth-prod-rds.cluster-cqa4okalp3qn.us-east-1.rds.amazonaws.com",
            "password": "Test#123",
            "port": "5432",
            "database": "dap"},
        "destination_config": {
            "username": "batman",
            "host": "arkansashealth-prod-redshift.cg8mcnhmisj5.us-east-1.redshift.amazonaws.com",
            "password": "Test#123",
            "port": "5439",
            "database": "arkansashealth_prod"
        },
        "columns": [
          "id_keys",
"empi",
"alid",
"alcc",
"st",
"sstp",
"alcs",
"alsc",
"alsn",
"alc",
"als",
"alrcn",
"papcid",
"fapid",
"aprc",
"aprt",
"aprcs",
"aptc",
"aptn",
"aptcs",
"apd",
"apdu",
"alrdt",
"apldt",
"eid",
"apltm",
"pcid",
"pcfn",
"apcmn",
"apclm",
"afid",
"affn",
"afmn",
"afln",
"aeid",
"aefn",
"aemn",
"aeln",
"ppcapid",
"pfapid",
"apsc",
"abkdt",
"alrtp",
"tid",
"tbid",
"tsdt",
"tpdt",
"tsc",
"tscs",
"sdc",
"tt",
"tcamt",
"chtc",
"licamt",
"licop",
"chsbdt",
"tsn",
"sdn",
"ttn",
"tqt",
"utat",
"cat",
"cocd",
"cocdt",
"coc",
"cptp",
"cpfn",
"cpmn",
"cpln",
"cocsa1",
"cocci",
"cocst",
"coccy",
"cocz",
"coccn",
"cocfg",
"cocsa2",
"cocatp",
"cocntp",
"cid",
"csbdt",
"cpdt",
"cadt",
"capdt",
"cht",
"at",
"poac",
"adjr",
"drc",
"cltc",
"stp",
"adjs",
"cftc",
"rsc",
"pih",
"coph",
"coha",
"ddah",
"adjrn",
"drn",
"bt",
"stpc",
"adjsn",
"cbftn",
"dea",
"cpiml",
"caia",
"imeamt",
"cdpa",
"cuca",
"cdsa",
"clid",
"ct",
"clsfdt",
"clsldt",
"clapdt",
"uqt",
"catp",
"rcc",
"ctn",
"nad",
"ahfpat",
"alat",
"bp",
"cobat",
"ciat",
"cpat",
"cexp",
"dat",
"ecf",
"sbc",
"sbcn",
"cmnpr",
"bmsc",
"bdsc",
"cnppc",
"clpic",
"cloutfl",
"ahc",
"tel2",
"tel3",
"tel4",
"ssa1",
"ssa2",
"sci",
"sct",
"sctn",
"sst",
"sstn",
"scy",
"sz",
"race",
"efdt",
"fn",
"mn",
"ln",
"ptsnm",
"ptsdob",
"orec",
"byind",
"pl",
"bfmdst",
"bfsdcd",
"hpstdt",
"hpenddt",
"rel",
"mbi",
"dob",
"gn",
"dod",
"id",
"idt",
"ssn4",
"ssn",
"eml1",
"cell1",
"tel1",
"psa1",
"psa2",
"pci",
"pct",
"pctn",
"pst",
"pstn",
"pcy",
"pz",
"ethn",
"df",
"ms",
"sid",
"pstp",
"ptsrc",
"racen",
"ethnm",
"msn",
"pcpn",
"apfdt",
"pcpslid",
"pcpsln",
"pcpfdt",
"pcpldt",
"pcpidt",
"pcpslidt",
"did",
"ad",
"pdn",
"pds",
"pdsn",
"ccsdc",
"ccsgn",
"ccsv",
"drgn",
"drgv",
"adn1",
"adn2",
"adn3",
"adn4",
"adn5",
"adn6",
"adn7",
"adn8",
"adn9",
"adn10",
"adn11",
"adn12",
"adn13",
"adn14",
"ddt",
"adn15",
"adn16",
"adn17",
"adn18",
"adn19",
"adn20",
"adn21",
"adn22",
"adn23",
"adn24",
"adn25",
"adn26",
"adn27",
"adn28",
"adn29",
"pd",
"pdcs",
"drg",
"ad1",
"ad2",
"ad3",
"ad4",
"ad5",
"ad6",
"ad7",
"ad8",
"ad9",
"ad10",
"ad11",
"ad12",
"ad13",
"ad14",
"ad15",
"ad16",
"ad17",
"ad18",
"ad19",
"ad20",
"ad21",
"ad22",
"ad23",
"ad24",
"ad25",
"ad26",
"ad27",
"ad28",
"ad29",
"adn",
"er",
"es",
"drdn",
"stn",
"sln",
"vif",
"apftm",
"inpid",
"incid",
"et",
"atc",
"raid",
"adsc",
"eldt",
"drdc",
"drtl",
"fc",
"stc",
"slc",
"adt",
"drdt",
"adsrn",
"fao",
"fdf",
"fdc",
"fdcs",
"fddt",
"fdid",
"fdnm",
"frc",
"frn",
"imid",
"imn",
"imc",
"imcs",
"imfdt",
"imftm",
"imldt",
"imltm",
"ims",
"imas",
"imasu",
"imsn",
"imsln",
"imsedt",
"inpn",
"inptp",
"aln",
"incn",
"ingno",
"inorgn",
"inpt",
"infn",
"inln",
"inmn",
"inpr",
"indob",
"inprsq",
"ptsid",
"ptsrn",
"inpcs",
"ingerid",
"ingen",
"inpfdt",
"inpldt",
"prs",
"prt",
"ptsgn",
"prn",
"prfn",
"prno",
"rxn",
"norr",
"nord",
"rxs",
"rxgun",
"mdat",
"phid",
"phidtp",
"mfnm",
"prdt",
"rxc",
"rxcs",
"rxmc",
"smcs",
"gf",
"rxfdt",
"rxldt",
"msrga",
"rxds",
"nor",
"mrrdt",
"rxguc",
"rxgucs",
"phn",
"phcy",
"phst",
"dpct",
"phz",
"phsa1",
"phcn",
"mrtcd",
"mrtnm",
"mst",
"mstn",
"mfrq",
"mfrn",
"rxsut",
"pstc",
"drgea",
"daw",
"cms",
"cmd",
"cmt",
"os",
"oc",
"on",
"ocs",
"pon",
"ofdt",
"rst",
"odt",
"pbn",
"pbfdt",
"pbrdt",
"pbldt",
"pbc",
"pbcs",
"pbst",
"pbtp",
"pbtpc",
"pid",
"pn",
"pftm",
"pltm",
"pftc",
"pftnm",
"pmn1",
"pmn2",
"pmn3",
"pmn4",
"pmn5",
"apn1",
"apn2",
"apn3",
"apn4",
"apn5",
"pc",
"pcs",
"pfdt",
"pldt",
"pm1",
"pm2",
"pm3",
"pm4",
"pm5",
"ap1",
"ap2",
"ap3",
"ap4",
"ap5",
"ap6",
"ap7",
"ap8",
"ap9",
"ap10",
"ap11",
"ap12",
"ap13",
"ap14",
"ap15",
"ap16",
"ap17",
"ap18",
"ap19",
"ap20",
"ap21",
"ap22",
"ap23",
"ap24",
"ap25",
"apn6",
"apn7",
"apn8",
"apn9",
"apn10",
"apn11",
"apn12",
"apn13",
"apn14",
"apn15",
"apn16",
"apn17",
"apn18",
"apn19",
"apn20",
"apn21",
"apn22",
"apn23",
"apn24",
"apn25",
"betc",
"alcn",
"acon",
"adpid",
"adpidt",
"adpn",
"adpnpi",
"adps",
"adpsc",
"adpscl",
"atpid",
"atpidt",
"atpn",
"atpnpi",
"atps",
"atpsc",
"atpscl",
"cpid",
"cpidt",
"cpn",
"cpnpi",
"cps",
"cpsc",
"cpscl",
"ftccn",
"ftci",
"ftid",
"ftidt",
"ftn",
"ftnpi",
"ftsa1",
"ftsa2",
"ftsp",
"ftspcd",
"ftst",
"ftstn",
"ftz",
"opid",
"opidt",
"opn",
"opnpi",
"opsc",
"opscl",
"opsn",
"orgid",
"orgn",
"orgrid",
"orgrn",
"orgtin",
"otpid",
"otpidt",
"otpn",
"otpnpi",
"otps",
"otpsc",
"otpscl",
"rpid",
"rpidt",
"rpn",
"rpnpi",
"rps",
"rpsc",
"rpscl",
"pcpid",
"spidt",
"spn",
"spid",
"sps",
"spsc",
"spscl",
"obf",
"rn",
"natc",
"rredt",
"rc",
"rcs",
"rv",
"sru",
"onrr",
"rrh",
"rrl",
"oac",
"rdt",
"rhv",
"rlv",
"uru",
"rid",
"raoid",
"raoc",
"aao",
"asv",
"ac",
"an",
"acs",
"aov",
"aou",
"as",
"ardt",
"rcdt",
"meunm",
"metmstp",
"medt",
"mefn",
"meln",
"meuid",
"menote",
"ingdt",
"pipid",
"sfn",
"spnpi",
"ptt",
"vdnm",
"vdml",
"cltp",
"emrtp",
"vn",
"vrcl",
"vrd",
"vrredt",
"vnn",
"vc",
"vcs",
"vrdt",
"vrtm",
"vv",
"vu",
"vrr",
"vrl",
"vrh",
"vnc",
"prvid",
"pthcno",
"bedpa",
"bedpb",
"sno",
"acoid",
"reported_coverage_gap_discount",
"low_income_cost_sharing_paid",
"gross_drug_cost_above_out_of_pocket_threshold",
"lob",
"lob_id",
"relative_name",
"relationship",
"relative_phone",
"problem_id",
"assessment_type",
"assessment_score",
"living_will_status",
"power_of_attorney_status",
"do_not_resusciate_status",
"allergy_onset_date",
"vital_status",
"alternate_patient_id",
"patient_status",
"clvl1_id",
"clvl1_name",
"clvl2_id",
"clvl2_name",
"clvl3_id",
"clvl3_name",
"clvl4_id",
"clvl4_name",
"fdod",
"rxind",
"rxct",
"ladrg",
"oftm",
"rtm",
"rflg",
"ptbnum",
"ptrnum",
"ptunum",
"ptsnum",
"dtp",
"admrtcd",
"admrtnm",
"admfrq",
"adrxs",
"adrxsut",
"adrxgun",
"adrxfdt",
"adrxldt",
"attachment_filepath",
"attachment_creation_date",
"attachment_type",
"attachment_name",
"lst",
"ermfg",
"sldt",
"eps",
"otherlang",
"otherlangds",
"ernm",
"uadmdtm",
"udisdtm",
"admit_notification_date",
"discharge_notification_date",
"lace_score",
"raceds",
"ethnds",
"spokenlang",
"spokenlangds",
"writtenlang",
"writtenlangds",
"tooth_surface",
"tooth_number",
"race2",
"race3"],
        "sync_mode": "append"
    },
    "schedule": {"run": "once", "interval": "monthly", "start_time": "2022-07-22T02:30:00"},
    "filters": [{"column": "sstp",
                     "operator": "in",
                     "value": [
                       "ACH",
                       "CHI_SV_Health_Plan",
                       "MSSP Track 2",
                       "ABCBS_CHI",
                       "CHISV",
                       "Humana_MA",
                       "EngageMED",
                       "Nabholz",
                       "ABCBS_MA"]
}]
}]

class Runner(object):
    @staticmethod
    def runner(file_object):
        try:

            r = requests.post(url_1, json = form_data)
            status = r.status_code

            if status != 200:
                raise Exception(r.content)
            else:
                try:

                    pipeline_id = str(r.json()['pipeline_id']).strip().strip("\n")

                    url_2 = "http://dap-data-sync-orchestrator/v1/stats?pipeline_id={}".format(pipeline_id)
                    time.sleep(1000)
                    
                    execution_time = datetime.datetime.now().strftime('%Y-%m-%d  %H:%M:%S') ##
                    
                    message1 = {
                      "blocks":
                      [
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": f"-----------------x------------------"
                          }
                        },
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": "*l2.pd_activity*"
                          }
                        },
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": f"Pipeline ID: {pipeline_id}"
                          }
                        },
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": f"Execution Time: {execution_time}"
                          }
                        }
                      ]
                    }
                    
                    requests.post(webhook_url, json.dumps(message1))
                    
                    while 1:
                        x = requests.get(url_2)
                        status = x.status_code
                        if status != 200:
                            raise Exception(x.content)
                        else:

                            output = x.json()
                            for data in output:

                                if data["tag"] == 'initialization':

                                    dict1 = {
                                    "pipeline_id": pipeline_id,
                                    "tag": data["tag"],
                                    "job_status": data["job_status"],
                                    "current_step": data["current_step"],
                                    "current_step_status": data["current_step_status"],
                                    "error": data["error"], "stacktrace": data["stacktrace"]} ## fail case1
                                else:

                                    dict1 = {
                                    "pipeline_id": pipeline_id,
                                    "tag": data["tag"],
                                    "job_status": data["job_status"],
                                    "current_step": data["current_step"],
                                    "current_step_status": data["current_step_status"],
                                    "error": data["error"], "stacktrace": data["stacktrace"], ## the source
                                    "source_count": data["source_count"], ## and the destination must match
                                    "destination_count": data["destination_count"]} ## success case to exit

                                if len(data["error"]) >= 1:
                                    raise Exception(x.content)

                                if data["job_status"] == "success":
                                    yield "Movement Done"
                                    yield "\n"
                                    yield "Source Count: " + str(data["source_count"]) ######
                                    yield "\n"
                                    yield "Destination Count: " + str(data["destination_count"]) ## do exit
                                    
                                    message2 = {
                                      "blocks":
                                      [
                                        {
                                          "type": "context",
                                          "elements": [
                                            {
                                              "type": "mrkdwn",
                                              "text": f":white_check_mark: Migration Completed"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                    requests.post(webhook_url, json.dumps(message2))
                                    
                                    time.sleep(1000)
                                    return
                except Exception as e:
                    
                    message3 = {
                      "blocks":
                      [
                        {
                          "type": "context",
                          "elements": [
                            {
                              "type": "mrkdwn",
                              "text": f":warning: Error in Migration:\n {e}"
                            }
                          ]
                        }
                      ]
                    }
                    requests.post(webhook_url, json.dumps(message3)) ## post error message on slack channel
                    raise e
        except Exception as e:
            raise e
